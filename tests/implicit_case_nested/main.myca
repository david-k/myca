proc set(object: ^mut i32, value: ??i32)
{
	object^ := unwrap_or(unwrap_or(value, .fallback=100), .fallback=200);
}

proc main() -> i32
{
	let mut object = 0;
	set(&mut object, 23);

	return object;
}


//------------------------------------------------------------------------------
struct Option'T
{
    case implicit Some{value: T},
    case None,
}

typealias Some'T = Option'(T).Some;
typealias None'T = Option'(T).None;

proc unwrap_or'T(opt: ?T, fallback: T) -> T
{
	match opt
	{
		case Some(let value) { return value; }
		case None { return fallback; }
	}
}
