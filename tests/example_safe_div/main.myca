proc safe_div(a: i32, b: i32) -> ?i32
{
    if b == 0 {
        return None;
    }

    return a / b;
}

proc main() -> i32
{
	let a = unwrap_or(safe_div(13, 2), .fallback=-1); // 6
	let b = unwrap_or(safe_div(13, 0), .fallback=-1); // -1

	return a + b;
}


//------------------------------------------------------------------------------
struct Option'T
{
    case implicit Some{value: T},
    case None,
}

typealias Some'T = Option'(T).Some;
typealias None'T = Option'(T).None;

proc unwrap_or'T(opt: ?T, fallback: T) -> T
{
	match opt
	{
		case Some(let value) { return value; }
		case None { return fallback; }
	}
}
