// Lib C
//==============================================================================
struct c_void { _: Never }
struct c_char { _: i8 }

extern proc malloc(size: usize) -> ^mut c_void;
extern proc free(ptr: ^mut c_void);
extern proc puts(str: [^]c_char) -> i32;
extern proc fatal(msg: [^]c_char);


struct Option'T
{
	case implicit Some{value: T},
	case None,
}

typealias Some'T = Option'(T).Some;
typealias None'T = Option'(T).None;

proc unwrap'T(opt: ?T) -> T
{
	match opt
	{
		case Some(let value) { return value; }
		case None { fatal(c"empty option"); }
	}
}


// Main
//==============================================================================
proc main() -> i32
{
	let mut arr = Array'i32();
	add(&mut arr, 3);
	add(&mut arr, 99);

	puts(c"Hello?");

	let opt = Option'i32.None;
	let d = unwrap_or(opt, .fallback=42);

	return id(foo()) + unwrap(arr.buf)[0] + (length(&arr) as i32) + d; // 155
}


// Array
//==============================================================================
struct Array'T
{
	buf: ?[^]mut T = None,
	length: usize = 0,
	capacity: usize = 0,
}


proc length'T (arr: ^Array'T) -> usize
{
	return arr^.length;
}

proc add'T (arr: ^mut Array'T, val: T)
{
	if arr^.length + 1 > arr^.capacity {
		let new_cap = max(arr^.capacity * 2, 1);
		grow_capacity(arr, new_cap);
	}

	unwrap(arr^.buf)[arr^.length] := val;
	arr^.length := arr^.length + 1;
}

proc grow_capacity'T (arr: ^mut Array'T, target_cap: usize)
{
	// assert(arr^.length <= target_cap);

	let new_buf = malloc(target_cap * size_of(T)) as [^]mut T;
	let mut i: usize = 0;
	while i < arr^.length {
		new_buf[i] := unwrap(arr^.buf)[i];
		i := i + 1;
	}

	arr^.buf := new_buf;
	arr^.capacity := target_cap;
}


proc max(a: usize, b: usize) -> usize
{
	if a < b {
		return b;
	}

	return a;
}

/*proc max'T (a: T, b: T) -> T
{
	if a < b {
		return b;
	}

	return a;
}*/


// &own is essentially equivalent to an r-value reference in C++
/*proc Array.add(self &mut, val: &own T)
{
	self.buf[self.length] = val;
	self.length += 1;
}*/


// Slice
//==============================================================================
/*struct M:?mut Slice'T
{
	ptr: [^]M T,
	length: usize,
}*/


// Misc
//==============================================================================
proc id'T (v: T) -> T
{
	return v;
}


proc bar() -> i32
{
	let opt = IntOpt.Some(3);
	let opt2: Option'(Int).Some = opt;
	let opt3 = Some(55);
	return opt2.value + opt3.value;
}

typealias IntOpt = Option'i32;
typealias Int = i32;


proc foo() -> i32
{
	let opt = Option'(Vec2'i32).Some(Vec2'i32(8, 9));
	let _ = Option.Some(Vec2(8, 9));

	let xxx: Option'bool = Option.Some(false);

	let bv = Vec2(true, false);
	let b: bool = bv.y;

	let vec: Vec2i = opt.value;

	let player = Player(
		.pos = vec
	);

	let v = player.pos;

	if b {
		return v.y + player.health;
	} else {
		return v.x + player.health;
	}
}

struct Vec2'S
{
	x: S,
	y: S,
}

struct Player'T
{
	pos: Vec2'T,
	health: i32 = 100,
}

typealias Vec2i = Vec2'i32;





typealias Ptr'T = ^T;

proc baz()
{
	let a = 5;
	let b = true;

	let pa: Ptr = &a;
	let pb: Ptr = &b;
}


proc unwrap_or'T(opt: Option'T, fallback: T) -> T
{
	match opt
	{
		case Option.Some(let value) { return value; }
		case Option.None { return fallback; }
	}
}
