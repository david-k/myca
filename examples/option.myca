struct c_char { _: i8 }
extern proc fatal(msg: [^]c_char);


struct Option'T
{
	case implicit Some{value: T},
	case None,
}

typealias Some'T = Option'T.Some;
typealias None'T = Option'T.None;


proc safe_div(a: i32, b: i32) -> ?i32
{
	if b == 0 {
		return None;
	}

	return a / b;
}

proc unwrap'T(opt: ?T) -> T
{
	match opt
	{
		case Some -> v { return v.value; }
		case None { fatal(c"empty option"); }
	}
}


proc main() -> i32
{
	let o: ?i8 = 23 + 1 + 2;

	let p: ?^i32 = None;
	let idx: ?i32 = 3;

	let u = unwrap(5);

	let mut oo: ??i8 = None;
	oo := Some(None);
	oo := Some(Some(74));
	oo := 89 - 11;
	oo := Some(99);

	match idx
	{
		case Some -> v { return v.value + unwrap(safe_div(13, 2)) + unwrap(1) + unwrap(unwrap(oo)); } // 109
		case None { return 0; }
	}
}
